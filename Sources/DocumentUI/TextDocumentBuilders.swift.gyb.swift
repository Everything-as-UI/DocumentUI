%{
elements = ['D0', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'D10', 'D11', 'D12', 'D13', 'D14']
}%
///
///  Generated by GYB.
///

import Foundation

protocol DocumentVisitor {
    func visit<D>(_ document: D) where D: TextDocument
    % for count in range(2, 11):
    func visit<${', '.join(elements[:count])}>(
        ${', '.join(map(lambda x: '_ ' + x.lower() + ': ' + x, elements[:count]))}
    ) where ${', '.join(map(lambda x: x + ': TextDocument', elements[:count]))}
    % end
}
extension DocumentVisitor {
    % for count in range(2, 11):
    func visit<${', '.join(elements[:count])}>(
        ${', '.join(map(lambda x: '_ ' + x.lower() + ': ' + x, elements[:count]))}
    ) where ${', '.join(map(lambda x: x + ': TextDocument', elements[:count]))} {
        ${'; '.join(map(lambda x: 'visit(' + x.lower() + ')', elements[:count]))}
    }
    % end
}

extension TextDocumentBuilder {
    % for count in range(2, 11):
    public static func buildBlock<${', '.join(elements[:count])}>(
        ${', '.join(map(lambda x: '_ ' + x.lower() + ': ' + x, elements[:count]))}
    ) -> TupleDocument<(${', '.join(elements[:count])})> where ${', '.join(map(lambda x: x + ': TextDocument', elements[:count]))} {
        TupleDocument { visitor in
            visitor.visit(${', '.join(elements[:count]).lower()})
        }
    }
    % end
}
